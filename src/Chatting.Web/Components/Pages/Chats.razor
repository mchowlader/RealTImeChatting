@page "/chatting"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<label>Name: @SenderId</label>

<div class="form-group">
    <lebel>
        Receiver Name: <input @bind="userInput" />
    </lebel>
</div>
<div class="form-group">
    <lebel>
        Message: <input @bind="messageInput" />
    </lebel>
</div>
<button @onclick="Send" disabled="@(IsConnected == false)">Send</button>

<hr />

<ul>
    @foreach (var message in messages)
    {
        @if ((SenderId == message.SenderId && ReceiverId == message.ReceiverId) 
        || (SenderId == message.ReceiverId && ReceiverId == message.SenderId))
        {
            <div>
                <b>@((message.SenderId)):</b> @message.Message
            </div>
        }
    }
</ul>

@code {

    private HubConnection? hubConnection;
    private IList<Data> messages = new List<Data>();
    private string? userInput;
    private string? messageInput;
    public string? currentUserName;
    public string? ReceiverId { get; set; }
    public string? SenderId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            SenderId = user.Identity.Name;
        }

        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", (currentUserName, receiverId, message) =>
        {
            if ((SenderId == currentUserName && ReceiverId == receiverId) || (SenderId == receiverId && ReceiverId == currentUserName))
            {
                var data = new Data()
                {
                    SenderId = currentUserName,
                    ReceiverId = receiverId,
                    Message = message
                };

                messages.Add(data);
                InvokeAsync(StateHasChanged);
            }

        });

        await hubConnection.StartAsync();


    }

    private async Task Send()
    {
        if (userInput is not null)
        {
            ReceiverId = userInput;
        }
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", SenderId, ReceiverId, messageInput);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisponseAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    public class Data
    {
        public string? SenderId { get; set; }
        public string? ReceiverId { get; set; }
        public string? Message { get; set; }
    }
}